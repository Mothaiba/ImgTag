}
set.seed(123)
kmeansModel = kmeans(kPoints, centers = nWords, iter.max = 20)
clus = kmeansModel$cluster
BOW = array(data = 0, dim = c(nImages, nWords))
cnt = 0
for(i in 1 : length(target)){
for(j in 1 : nFrameIn[i]){
cnt = cnt + 1
BOW[i, clus[cnt]] = BOW[i, clus[cnt]] + 1
}
}
BOW = cbind(BOW, target)
#     write.csv(BOW, file = paste(outBOWFolder, substr(dataset, regexpr("/[^/]*$", dataset) + 1,
#                                 nchar(dataset)),'_BOW.csv'), row.names = F)
}
getInterestingPoints <- function(colorImg){
xresolution = nrow(colorImg[,,1])
yresolution = ncol(colorImg[,,1])
img = toGrayScale(colorImg)
blurred = array(dim = c(5, xresolution, yresolution))
blurred[1,,] = img
for(i in 2 : 5){
blurred[i,,] = getBlurred(blurred[i - 1,,], xresolution, yresolution)
# writeJPEG(blurred[i,,], paste(toString(i), 'blurred.jpg'))
}
differ = array(dim = c(4, xresolution, yresolution))
for(i in 1 : 4){
differ[i,,] = blurred[i + 1,,] - blurred[i,,]
writeJPEG(differ[i,,], paste(toString(i), 'differ.jpg'))
}
res = array(0, dim = c(xresolution, yresolution))
xpatch2 = floor(xpatch / 2)
ypatch2 = floor(ypatch / 2)
xpos = NULL
ypos = NULL
for(i in (xpatch2 + 1) : (xresolution - xpatch2 - 1))
for(j in (ypatch2 + 1) : (yresolution - ypatch2 - 1)){
isInteresting = F
for(k in 2 : 3){
if(differ[k, i, j] < differThreshold)
next
toAdd = T
for(t in 1 : 9){
u = i + p[t]
v = j + q[t]
if (
# differ[k, i, j] < differ[k - 1, u, v] ||
differ[k, i, j] < differ[k, u, v]
|| differ[k, i, j] < differ[k + 1, u, v]
){
toAdd = F
break
}
}
if(toAdd == T){
isInteresting = T
break
}
toAdd = T
for(t in 1 : 9){
u = i + p[t]
v = j + q[t]
if (
differ[k, i, j] > differ[k - 1, u, v]
|| differ[k, i, j] > differ[k, u, v]
# || differ[k, i, j] > differ[k + 1, u, v]
){
toAdd = F
break
}
}
if(toAdd == T){
isInteresting = T
break
}
}
if(isInteresting){
xpos = c(xpos, i)
ypos = c(ypos, i)
}
}
pos = cbind(xpos, ypos)
return (pos)
}
# This is getting Accepted!
# Phung Minh Tung
#==============================================
datasets = list.dirs(allDataLink, recursive = F)
for(dataset in datasets){
# 'target' is the list of categories corresponding to list of all images
target = getTarget(dataset)
# the number of images
nImages = length(target)
# create an array for keypoints
# this should be changed when we change features
kPoints = array(dim = c(nImages * nkeypoints, 3))
#
nFrameIn = array(dim = 0)
# an iterative variable
cnt = 0
categories = list.dirs(dataset, recursive = F)
for(category in categories){
images = list.files(category, full.names =  T)
for(image in images){
img = readJPEG(image)
# if image is greyscale, change it to RGB color
if(length(dim(img)) == 2)
img = toRGB(img)
xresolution = nrow(img[,,1])
yresolution = ncol(img[,,1])
#size of each patch
xpatch = floor(xresolution / npart)
ypatch = floor(yresolution / npart)
#=======================================================
# The following is code to generate BOW from Color Averageing only
#
#             #randomly choosing from patches
#             randP = sample(1 : npatches, nkeypoints)
#             for(number in randP){
#
#                 # get top-left co-ordinate of the number-th patch of the image
#                 coordinate = getCoordinate(xpatch, ypatch, number)
#
#                 # extract color-average feature, save it to array kPoints
#                 cnt = cnt + 1
#                 kPoints[cnt, ] = getColorAverage(img[coordinate[1] : (coordinate[1] + xpatch - 1),
#                                                 coordinate[2] : (coordinate[2] + ypatch - 1),])
#
#             }
#             nFrameIn = c(nFrameIn, nkeypoints)
#=======================================================
#=======================================================
# The following is for using Interesting point - technique from SVM
iPosition = getInterestingPoints(img)
print('after get points')
len = dim(iPosition)[1]
print(len)
nFrameIn = c(nFrameIn, len)
for(i in 1 : len){
cnt = cnt + 1
coordinate = c(iPosition[i, 1] - xpatch2, iPosition[i, 2] - ypatch2)
kPoints[cnt, ] = getColorAverage(img[coordinate[1] : (coordinate[1] + xpatch - 1),
coordinate[2] : (coordinate[2] + ypatch - 1),])
}
#=======================================================
}
}
set.seed(123)
kmeansModel = kmeans(kPoints, centers = nWords, iter.max = 20)
clus = kmeansModel$cluster
BOW = array(data = 0, dim = c(nImages, nWords))
cnt = 0
for(i in 1 : length(target)){
for(j in 1 : nFrameIn[i]){
cnt = cnt + 1
BOW[i, clus[cnt]] = BOW[i, clus[cnt]] + 1
}
}
BOW = cbind(BOW, target)
#     write.csv(BOW, file = paste(outBOWFolder, substr(dataset, regexpr("/[^/]*$", dataset) + 1,
#                                 nchar(dataset)),'_BOW.csv'), row.names = F)
}
coordinate
xresolution
yresolution
xpatch
ypatch
i
iPosition[i,]
iPosition[i]
dim(iPosition)
iPosition
getInterestingPoints <- function(colorImg){
xresolution = nrow(colorImg[,,1])
yresolution = ncol(colorImg[,,1])
img = toGrayScale(colorImg)
blurred = array(dim = c(5, xresolution, yresolution))
blurred[1,,] = img
for(i in 2 : 5){
blurred[i,,] = getBlurred(blurred[i - 1,,], xresolution, yresolution)
# writeJPEG(blurred[i,,], paste(toString(i), 'blurred.jpg'))
}
differ = array(dim = c(4, xresolution, yresolution))
for(i in 1 : 4){
differ[i,,] = blurred[i + 1,,] - blurred[i,,]
writeJPEG(differ[i,,], paste(toString(i), 'differ.jpg'))
}
res = array(0, dim = c(xresolution, yresolution))
xpatch2 = floor(xpatch / 2)
ypatch2 = floor(ypatch / 2)
xpos = NULL
ypos = NULL
for(i in (xpatch2 + 1) : (xresolution - xpatch2 - 1))
for(j in (ypatch2 + 1) : (yresolution - ypatch2 - 1)){
isInteresting = F
for(k in 2 : 3){
if(differ[k, i, j] < differThreshold)
next
toAdd = T
for(t in 1 : 9){
u = i + p[t]
v = j + q[t]
if (
# differ[k, i, j] < differ[k - 1, u, v] ||
differ[k, i, j] < differ[k, u, v]
|| differ[k, i, j] < differ[k + 1, u, v]
){
toAdd = F
break
}
}
if(toAdd == T){
isInteresting = T
break
}
toAdd = T
for(t in 1 : 9){
u = i + p[t]
v = j + q[t]
if (
differ[k, i, j] > differ[k - 1, u, v]
|| differ[k, i, j] > differ[k, u, v]
# || differ[k, i, j] > differ[k + 1, u, v]
){
toAdd = F
break
}
}
if(toAdd == T){
isInteresting = T
break
}
}
if(isInteresting){
xpos = c(xpos, i)
ypos = c(ypos, j)
}
}
pos = cbind(xpos, ypos)
return (pos)
}
# This is getting Accepted!
# Phung Minh Tung
#==============================================
datasets = list.dirs(allDataLink, recursive = F)
for(dataset in datasets){
# 'target' is the list of categories corresponding to list of all images
target = getTarget(dataset)
# the number of images
nImages = length(target)
# create an array for keypoints
# this should be changed when we change features
kPoints = array(dim = c(nImages * nkeypoints, 3))
#
nFrameIn = array(dim = 0)
# an iterative variable
cnt = 0
categories = list.dirs(dataset, recursive = F)
for(category in categories){
images = list.files(category, full.names =  T)
for(image in images){
img = readJPEG(image)
# if image is greyscale, change it to RGB color
if(length(dim(img)) == 2)
img = toRGB(img)
xresolution = nrow(img[,,1])
yresolution = ncol(img[,,1])
#size of each patch
xpatch = floor(xresolution / npart)
ypatch = floor(yresolution / npart)
#=======================================================
# The following is code to generate BOW from Color Averageing only
#
#             #randomly choosing from patches
#             randP = sample(1 : npatches, nkeypoints)
#             for(number in randP){
#
#                 # get top-left co-ordinate of the number-th patch of the image
#                 coordinate = getCoordinate(xpatch, ypatch, number)
#
#                 # extract color-average feature, save it to array kPoints
#                 cnt = cnt + 1
#                 kPoints[cnt, ] = getColorAverage(img[coordinate[1] : (coordinate[1] + xpatch - 1),
#                                                 coordinate[2] : (coordinate[2] + ypatch - 1),])
#
#             }
#             nFrameIn = c(nFrameIn, nkeypoints)
#=======================================================
#=======================================================
# The following is for using Interesting point - technique from SVM
iPosition = getInterestingPoints(img)
print('after get points')
len = dim(iPosition)[1]
print(len)
nFrameIn = c(nFrameIn, len)
for(i in 1 : len){
cnt = cnt + 1
coordinate = c(iPosition[i, 1] - xpatch2, iPosition[i, 2] - ypatch2)
kPoints[cnt, ] = getColorAverage(img[coordinate[1] : (coordinate[1] + xpatch - 1),
coordinate[2] : (coordinate[2] + ypatch - 1),])
}
#=======================================================
}
}
set.seed(123)
kmeansModel = kmeans(kPoints, centers = nWords, iter.max = 20)
clus = kmeansModel$cluster
BOW = array(data = 0, dim = c(nImages, nWords))
cnt = 0
for(i in 1 : length(target)){
for(j in 1 : nFrameIn[i]){
cnt = cnt + 1
BOW[i, clus[cnt]] = BOW[i, clus[cnt]] + 1
}
}
BOW = cbind(BOW, target)
#     write.csv(BOW, file = paste(outBOWFolder, substr(dataset, regexpr("/[^/]*$", dataset) + 1,
#                                 nchar(dataset)),'_BOW.csv'), row.names = F)
}
coordinate
xresolution
yresolution
xpatch
ypatch
iPosition[i,]
xpatch2
ypatch2
# This is getting Accepted!
# Phung Minh Tung
#==============================================
datasets = list.dirs(allDataLink, recursive = F)
for(dataset in datasets){
# 'target' is the list of categories corresponding to list of all images
target = getTarget(dataset)
# the number of images
nImages = length(target)
# create an array for keypoints
# this should be changed when we change features
kPoints = array(dim = c(nImages * nkeypoints, 3))
#
nFrameIn = array(dim = 0)
# an iterative variable
cnt = 0
categories = list.dirs(dataset, recursive = F)
for(category in categories){
images = list.files(category, full.names =  T)
for(image in images){
img = readJPEG(image)
# if image is greyscale, change it to RGB color
if(length(dim(img)) == 2)
img = toRGB(img)
xresolution = nrow(img[,,1])
yresolution = ncol(img[,,1])
#size of each patch
xpatch = floor(xresolution / npart)
ypatch = floor(yresolution / npart)
#=======================================================
# The following is code to generate BOW from Color Averageing only
#
#             #randomly choosing from patches
#             randP = sample(1 : npatches, nkeypoints)
#             for(number in randP){
#
#                 # get top-left co-ordinate of the number-th patch of the image
#                 coordinate = getCoordinate(xpatch, ypatch, number)
#
#                 # extract color-average feature, save it to array kPoints
#                 cnt = cnt + 1
#                 kPoints[cnt, ] = getColorAverage(img[coordinate[1] : (coordinate[1] + xpatch - 1),
#                                                 coordinate[2] : (coordinate[2] + ypatch - 1),])
#
#             }
#             nFrameIn = c(nFrameIn, nkeypoints)
#=======================================================
#=======================================================
# The following is for using Interesting point - technique from SVM
xpatch2 = floor(xpatch / 2)
ypatch2 = floor(ypatch / 2)
iPosition = getInterestingPoints(img)
print('after get points')
len = dim(iPosition)[1]
print(len)
nFrameIn = c(nFrameIn, len)
for(i in 1 : len){
cnt = cnt + 1
coordinate = c(iPosition[i, 1] - xpatch2, iPosition[i, 2] - ypatch2)
kPoints[cnt, ] = getColorAverage(img[coordinate[1] : (coordinate[1] + xpatch - 1),
coordinate[2] : (coordinate[2] + ypatch - 1),])
}
#=======================================================
}
}
set.seed(123)
kmeansModel = kmeans(kPoints, centers = nWords, iter.max = 20)
clus = kmeansModel$cluster
BOW = array(data = 0, dim = c(nImages, nWords))
cnt = 0
for(i in 1 : length(target)){
for(j in 1 : nFrameIn[i]){
cnt = cnt + 1
BOW[i, clus[cnt]] = BOW[i, clus[cnt]] + 1
}
}
BOW = cbind(BOW, target)
#     write.csv(BOW, file = paste(outBOWFolder, substr(dataset, regexpr("/[^/]*$", dataset) + 1,
#                                 nchar(dataset)),'_BOW.csv'), row.names = F)
}
i
iPosition[i, ]
coordinate
xpatch
xresolution
yresolution
ypatch
dim(img)
kPoints[cnt, ] = getColorAverage(img[coordinate[1] : (coordinate[1] + xpatch - 1),
coordinate[2] : (coordinate[2] + ypatch - 1),])
(coordinate[1] + xpatch - 1)
coordinate[2] : (coordinate[2] + ypatch - 1)
img[coordinate[1] : (coordinate[1] + xpatch - 1),
+                                      coordinate[2] : (coordinate[2] + ypatch - 1),]
kPoints[cnt, ] = getColorAverage(img[coordinate[1] : (coordinate[1] + xpatch - 1),
coordinate[2] : (coordinate[2] + ypatch - 1),])
cnt
# This is getting Accepted!
# Phung Minh Tung
#==============================================
datasets = list.dirs(allDataLink, recursive = F)
for(dataset in datasets){
# 'target' is the list of categories corresponding to list of all images
target = getTarget(dataset)
# the number of images
nImages = length(target)
# create an array for keypoints
# this should be changed when we change features
kPoints1 = kPoints2 = kPoint3 = NULL
#
nFrameIn = array(dim = 0)
# an iterative variable
cnt = 0
categories = list.dirs(dataset, recursive = F)
for(category in categories){
images = list.files(category, full.names =  T)
for(image in images){
img = readJPEG(image)
# if image is greyscale, change it to RGB color
if(length(dim(img)) == 2)
img = toRGB(img)
xresolution = nrow(img[,,1])
yresolution = ncol(img[,,1])
#size of each patch
xpatch = floor(xresolution / npart)
ypatch = floor(yresolution / npart)
#=======================================================
# The following is code to generate BOW from Color Averageing only
#
#             #randomly choosing from patches
#             randP = sample(1 : npatches, nkeypoints)
#             for(number in randP){
#
#                 # get top-left co-ordinate of the number-th patch of the image
#                 coordinate = getCoordinate(xpatch, ypatch, number)
#
#                 # extract color-average feature, save it to array kPoints
#                 cnt = cnt + 1
#                 CA = getColorAverage(img[coordinate[1] : (coordinate[1] + xpatch - 1),
#                                      coordinate[2] : (coordinate[2] + ypatch - 1),])
#                 kPoints1 = c(kPoints1, CA[1])
#                 kPoints2 = c(kPoints1, CA[2])
#                 kPoints3 = c(kPoints1, CA[3])
#
#             }
#             nFrameIn = c(nFrameIn, nkeypoints)
#=======================================================
#=======================================================
# The following is for using Interesting point - technique from SVM
xpatch2 = floor(xpatch / 2)
ypatch2 = floor(ypatch / 2)
iPosition = getInterestingPoints(img)
print('after get points')
len = dim(iPosition)[1]
print(len)
nFrameIn = c(nFrameIn, len)
for(i in 1 : len){
cnt = cnt + 1
coordinate = c(iPosition[i, 1] - xpatch2, iPosition[i, 2] - ypatch2)
CA = getColorAverage(img[coordinate[1] : (coordinate[1] + xpatch - 1),
coordinate[2] : (coordinate[2] + ypatch - 1),])
kPoints1 = c(kPoints1, CA[1])
kPoints2 = c(kPoints1, CA[2])
kPoints3 = c(kPoints1, CA[3])
}
#=======================================================
}
}
kPoints = cbind(kPoints1, kPoints2, kPoint3)
set.seed(123)
kmeansModel = kmeans(kPoints, centers = nWords, iter.max = 20)
clus = kmeansModel$cluster
BOW = array(data = 0, dim = c(nImages, nWords))
cnt = 0
for(i in 1 : length(target)){
for(j in 1 : nFrameIn[i]){
cnt = cnt + 1
BOW[i, clus[cnt]] = BOW[i, clus[cnt]] + 1
}
}
BOW = cbind(BOW, target)
#     write.csv(BOW, file = paste(outBOWFolder, substr(dataset, regexpr("/[^/]*$", dataset) + 1,
#                                 nchar(dataset)),'_BOW.csv'), row.names = F)
}
