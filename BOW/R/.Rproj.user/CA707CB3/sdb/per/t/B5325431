{
    "contents" : "# Define functions\n\ngetTarget <- function(dataset){\n    \n    target = vector()\n    \n    categories = list.dirs(dataset, recursive = F)\n    # print(categories)\n    \n    for (i in 1 : length(categories)){\n        \n        category = list.files(categories[i])\n        target = c(target, array(i, dim = length(category)))\n        \n    }\n    \n    target = as.factor(target)\n    # print(target)\n    \n    return (target)\n    \n}\n\ntoRGB <- function(img){\n    \n    xresolution = nrow(img)\n    yresolution = ncol(img)\n    \n    newImg = array(dim = c(xresolution, yresolution, 3))\n    for(i in 1 : xresolution){\n        for(j in 1 : yresolution){\n            newImg[i, j, 1] = newImg[i, j, 2] = newImg[i, j, 3] = img[i, j]\n        }\n    }\n    \n    return(newImg)\n    \n}\n\ngetCoordinate <- function(xpatch, ypatch, number){\n    \n    x = floor((number - 1) / npart) * xpatch + 1\n    y = (number %% npart - 1) * ypatch + 1\n    if(y <= 0)\n        y = (npart - 1) * ypatch + 1\n    \n    return(c(x, y))\n    \n}\n\ngetColorAverage <- function(patch){\n    return(c(mean(patch[,,1]), mean(patch[,,2]), mean(patch[,,3])))\n}\n\ntoGrayScale <- function(colorImg){\n\n    img = 0.3 * colorImg[,,1] + 0.59 * colorImg[,,2] + 0.11 * colorImg[,,3]\n    return (img)\n    \n}\n\ngetBlurred <- function(img, xres, yres){\n    \n    res = array(dim = c(xres, yres))\n    \n    for(i in 1 : xres)\n        for(j in 1 : yres){\n            cnt = 0\n            sum = 0\n            for(k in 1 : 9){\n                u = i + p[k]\n                v = j + q[k]\n                if(u < 1 || u > xres || v < 1 || v > yres)\n                    next\n                cnt = cnt + 1\n                sum = sum + img[u, v]\n            }\n            res[i, j] = sum / cnt\n            \n        }\n    return(res)\n}\n\ngetInterestingPoints <- function(colorImg){\n    \n    xresolution = nrow(colorImg[,,1])\n    yresolution = ncol(colorImg[,,1])\n    img = toGrayScale(colorImg)\n    \n    blurred = array(dim = c(5, xresolution, yresolution))\n    blurred[1,,] = img\n    for(i in 2 : 5){\n        blurred[i,,] = getBlurred(blurred[i - 1,,], xresolution, yresolution)\n        # writeJPEG(blurred[i,,], paste(toString(i), 'blurred.jpg'))\n    }\n    \n    differ = array(dim = c(4, xresolution, yresolution))\n    for(i in 1 : 4){\n        differ[i,,] = blurred[i + 1,,] - blurred[i,,]\n        writeJPEG(differ[i,,], paste(toString(i), 'differ.jpg'))\n    }\n    \n    res = array(0, dim = c(xresolution, yresolution))\n    xpatch2 = floor(xpatch / 2)\n    ypatch2 = floor(ypatch / 2)\n    \n    xpos = NULL\n    ypos = NULL\n    \n    for(i in (xpatch2 + 1) : (xresolution - xpatch2 - 1))\n        for(j in (ypatch2 + 1) : (yresolution - ypatch2 - 1)){\n            isInteresting = F\n            for(k in 2 : 3){\n                if(differ[k, i, j] < differThreshold)\n                    next\n                toAdd = T\n                for(t in 1 : 9){\n                    u = i + p[t]\n                    v = j + q[t]\n                    if (\n                        # differ[k, i, j] < differ[k - 1, u, v] ||\n                       differ[k, i, j] < differ[k, u, v]\n                       || differ[k, i, j] < differ[k + 1, u, v]\n                      ){\n                        toAdd = F\n                        break\n                    }\n                }\n                if(toAdd == T){\n                    isInteresting = T\n                    break\n                }\n                \n                toAdd = T\n                for(t in 1 : 9){\n                    u = i + p[t]\n                    v = j + q[t]\n                    if ( \n                         differ[k, i, j] > differ[k - 1, u, v]\n                         || differ[k, i, j] > differ[k, u, v]\n                         # || differ[k, i, j] > differ[k + 1, u, v]\n                         ){\n                        toAdd = F\n                        break\n                    }\n                }\n                if(toAdd == T){\n                    isInteresting = T\n                    break\n                }                \n            \n            }\n            if(isInteresting){\n                xpos = c(xpos, i)\n                ypos = c(ypos, j)\n            }\n        }\n\n    pos = cbind(xpos, ypos)\n    \n    return (pos)\n    \n    \n}\n\n\n\n# a function to test if kmeans works as intended\n###\n# testCluster <- function(img, cluster, cnt){\n#     \n#     testFolder = '../testFolder/'\n#         \n#     for(j in 1 : length(cluster)){\n#         i = cluster[j]\n#         cnt = cnt + 1\n#         pName = paste(testFolder, toString(i), '--', toString(cnt), '.jpg')\n#         writeJPEG(img[[j]], target = pName)\n#         \n#     }\n#     \n# }\n###\n\n",
    "created" : 1451880572043.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3503962223",
    "id" : "B5325431",
    "lastKnownWriteTime" : 1452244918,
    "path" : "E:/Courses/Final Project/W5/R/function.R",
    "project_path" : "function.R",
    "properties" : {
        "tempName" : "Untitled3"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}