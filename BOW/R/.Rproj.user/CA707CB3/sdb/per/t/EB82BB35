{
    "contents" : "# This is getting Accepted!\n# Phung Minh Tung\n#==============================================\n\n\ndatasets = list.dirs(allDataLink, recursive = F)\n\nfor(dataset in datasets){\n    \n    # 'target' is the list of categories corresponding to list of all images\n    target = getTarget(dataset)\n    \n    # the number of images\n    nImages = length(target)\n    \n    # create an array for keypoints\n    # this should be changed when we change features\n    kPoints1 = kPoints2 = kPoint3 = NULL\n    \n    # \n    nFrameIn = array(dim = 0)\n    \n    categories = list.dirs(dataset, recursive = F)\n    for(category in categories){\n        \n        images = list.files(category, full.names =  T)\n        for(image in images){\n            \n            img = readJPEG(image)\n            \n            # if image is greyscale, change it to RGB color\n            if(length(dim(img)) == 2)\n                img = toRGB(img)\n            \n            xresolution = nrow(img[,,1])\n            yresolution = ncol(img[,,1])\n            \n            #size of each patch\n            xpatch = floor(xresolution / npart)\n            ypatch = floor(yresolution / npart)\n\n#=======================================================\n# The following is code to generate BOW from Color Averageing only\n# \n#             #randomly choosing from patches\n#             randP = sample(1 : npatches, nkeypoints)\n#             for(number in randP){\n#                 \n#                 # get top-left co-ordinate of the number-th patch of the image\n#                 coordinate = getCoordinate(xpatch, ypatch, number)\n#                 \n#                 # extract color-average feature, save it to array kPoints\n#                 CA = getColorAverage(img[coordinate[1] : (coordinate[1] + xpatch - 1), \n#                                      coordinate[2] : (coordinate[2] + ypatch - 1),])\n#                 kPoints1 = c(kPoints1, CA[1])\n#                 kPoints2 = c(kPoints1, CA[2])\n#                 kPoints3 = c(kPoints1, CA[3])\n#                 \n#             }\n#             nFrameIn = c(nFrameIn, nkeypoints)\n#=======================================================\n\n            \n#=======================================================\n# The following is for using Interesting point - technique from SVM\n            \n            xpatch2 = floor(xpatch / 2)\n            ypatch2 = floor(ypatch / 2)\n            \n            iPosition = getInterestingPoints(img)\n            print('after get points')\n            len = dim(iPosition)[1]\n            print(len)\n            nFrameIn = c(nFrameIn, len)\n            for(i in 1 : len){\n                \n                coordinate = c(iPosition[i, 1] - xpatch2, iPosition[i, 2] - ypatch2)\n                CA = getColorAverage(img[coordinate[1] : (coordinate[1] + xpatch - 1), \n                                                coordinate[2] : (coordinate[2] + ypatch - 1),])\n                kPoints1 = c(kPoints1, CA[1])\n                kPoints2 = c(kPoints1, CA[2])\n                kPoints3 = c(kPoints1, CA[3])  \n            }\n            \n            \n            \n#=======================================================\n\n\n        }\n        \n    }\n    \n    kPoints = cbind(kPoints1, kPoints2, kPoint3)\n    \n    set.seed(123)\n    kmeansModel = kmeans(kPoints, centers = nWords, iter.max = 20)\n    clus = kmeansModel$cluster\n    \n    BOW = array(data = 0, dim = c(nImages, nWords))\n    \n    cnt = 0\n    for(i in 1 : length(target)){\n        \n        for(j in 1 : nFrameIn[i]){\n            \n            cnt = cnt + 1\n            BOW[i, clus[cnt]] = BOW[i, clus[cnt]] + 1\n            \n        }\n        \n        \n    }\n    \n    BOW = cbind(BOW, target)\n    \n#     write.csv(BOW, file = paste(outBOWFolder, substr(dataset, regexpr(\"/[^/]*$\", dataset) + 1,\n#                                 nchar(dataset)),'_BOW.csv'), row.names = F)\n    \n    \n}",
    "created" : 1452044513315.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2170519307",
    "id" : "EB82BB35",
    "lastKnownWriteTime" : 1452244916,
    "path" : "E:/Courses/Final Project/W5/R/Featuring.R",
    "project_path" : "Featuring.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}