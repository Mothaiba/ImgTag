{
    "contents" : "#Featuring functions\n# ======================================================================================\n\n#-------------------------------------------------------\n# given a dataset, which contains all the links of the categories of the images\n# return an array, contains the category of each image, based on its folder\n\ngetTarget <- function(dataset){\n    \n    target = vector()\n    \n    categories = list.dirs(dataset, recursive = F)\n    # print(categories)\n    \n    for (i in 1 : length(categories)){\n        \n        category = list.files(categories[i])\n        target = c(target, array(i, dim = length(category)))\n        \n    }\n    \n    target = as.factor(target)\n    # print(target)\n    \n    return (target)\n    \n}\n# -------------------------------------------------------\n\n\n\n# ------------------------------------------------------------\n# main function of featuring\n\ngetFeatures <- function(img){\n    \n    if(length(dim(img)) == 2){\n        tmpImg = array(0, c(nrow(img), ncol(img), 3))\n        for(i in 1 : nrow(img)){\n            for(j in 1 : ncol(img)){\n                tmpImg[i, j, 1] = tmpImg[i, j, 2] = tmpImg[i, j, 3] = img[i, j]\n            }\n        }\n        img = tmpImg\n    }\n    xresolution = nrow(img[,,1])\n    yresolution = ncol(img[,,1])\n    \n    # img = floor(img * 255 / ( 256 / nbins))\n    \n    # return(toSpatialPyramid(img, 0, 1, xresolution, 1, yresolution))\n    return(toColorPyramid(img, 0, 1, xresolution, 1, yresolution))\n    \n}\n\n#-------------------------------------------------------------\n\n\n#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntoColorAverage <- function(img, lvl, xmin, xmax, ymin, ymax){\n    \n    ave = c(0, 0, 0)\n    \n    ave[1] = sum(img[xmin : xmax, ymin : ymax, 1]) /\n        ((xmax - xmin + 1) * (ymax - ymin + 1)) * lvlWeight[lvl + 1]\n\n    ave[2] = sum(img[xmin : xmax, ymin : ymax, 2]) /\n        ((xmax - xmin + 1) * (ymax - ymin + 1)) * lvlWeight[lvl + 1]\n    \n    ave[3] = sum(img[xmin : xmax, ymin : ymax, 3]) /\n        ((xmax - xmin + 1) * (ymax - ymin + 1)) * lvlWeight[lvl + 1]\n        \n    return(ave)\n    \n}\n\ntoColorPyramid <- function(img, lvl, xmin, xmax, ymin, ymax){\n    \n    ave = toColorAverage(img, lvl, xmin, xmax, ymin, ymax)\n    \n    if(lvl < pyramidLevel){\n        \n        xmid = floor((xmin + xmax) / 2)\n        ymid = floor((ymin + ymax) / 2)\n        \n        ave = c(ave, toColorPyramid(img, lvl + 1, xmin, xmid, ymin, ymid))\n        ave = c(ave, toColorPyramid(img, lvl + 1, xmid + 1, xmax, ymin, ymid))\n        ave = c(ave, toColorPyramid(img, lvl + 1, xmin, xmid, ymid + 1, ymax))\n        ave = c(ave, toColorPyramid(img, lvl + 1, xmid + 1, xmax, ymid + 1, ymax))\n        \n    }\n    \n    return(ave)\n    \n}\n\n\n\n#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n\n\n# ------------------------------------------------------------------------------------\n# given an image and pixel-ranges (xmin -> xmax, ymin -> ymax)\n# return the histogram of that image\n#   represented by a matrix of floats [nbins * nbins * nbins]\n\n# toHistogram <- function(img, lvl, xmin, xmax, ymin, ymax){\n#     histo = array(0 * (nbins * nbins * nbins), dim = c(nbins, nbins, nbins))\n#     # print(dim(histo))\n#     for (i in xmin : xmax){\n#         \n#         for (j in ymin : ymax){\n#             \n#             histo[img[i, j, 1], img[i, j, 2], img[i, j, 3]] =\n#                 histo[img[i, j, 1], img[i, j, 2], img[i, j, 3]] + 1\n#             \n#         }\n#         \n#     }\n#     \n#     histo = histo / ((xmax - xmin + 1) * (ymax - ymin + 1)) # normalization\n#     histo = array(histo, c(1, nbins * nbins * nbins)) * lvlWeight[lvl + 1] # weight for level i is lvlWeight[i + 1]\n#     # print(head(histo))\n#     return (histo)\n#     \n# }\n\n# ------------------------------------------------------------------------------------\n\n\n\n\n# -----------------------------------------------------------------\n# recursively compute the spatial pyramid of an image\n\n# toSpatialPyramid <- function(img, lvl, xmin, xmax, ymin, ymax){\n#     \n#     histo = toHistogram(img, lvl, xmin, xmax, ymin, ymax)\n#     \n#     if(lvl < pyramidLevel){\n#         \n#         xmid = floor((xmin + xmax) / 2)\n#         ymid = floor((ymin + ymax) / 2)\n#         histo = cbind(histo, toSpatialPyramid(img, lvl + 1, xmin, xmid, ymin, ymid))\n#         histo = cbind(histo, toSpatialPyramid(img, lvl + 1, xmid + 1, xmax, ymin, ymid))\n#         histo = cbind(histo, toSpatialPyramid(img, lvl + 1, xmin, xmid, ymid + 1, ymax))\n#         histo = cbind(histo, toSpatialPyramid(img, lvl + 1, xmid + 1, xmax, ymid + 1, ymax))\n#         \n#     }\n#     # print(length(histo))\n#     return (histo)\n#     \n# }\n",
    "created" : 1450806347300.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1289094517",
    "id" : "4C43D731",
    "lastKnownWriteTime" : 1450853943,
    "path" : "E:/Courses/Final Project/W3/R_code/Featuring_functions.R",
    "project_path" : "Featuring_functions.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}